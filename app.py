import logging
from aiogram import Bot, Dispatcher, executor, types
import keyboards as kb
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from config import TOKEN
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)




@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=kb.greet_kb)


@dp.message_handler(commands=['hi2'])
async def process_hi2_command(message: types.Message):
    await message.reply("–í—Ç–æ—Ä–æ–µ - –ø—Ä—è—á–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è", reply_markup=kb.greet_kb2)


@dp.message_handler(commands=['hi3'])
async def process_hi3_command(message: types.Message):
    await message.reply("–¢—Ä–µ—Ç—å–µ - –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫", reply_markup=kb.markup3)


@dp.message_handler(commands=['hi4'])
async def process_hi4_command(message: types.Message):
    await message.reply("–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ - —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥", reply_markup=kb.markup4)


@dp.message_handler(commands=['hi5'])
async def process_hi5_command(message: types.Message):
    await message.reply("–ü—è—Ç–æ–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫", reply_markup=kb.markup5)

@dp.message_handler(commands=['hi6'])
async def process_hi6_command(message: types.Message):
    await message.reply("–®–µ—Å—Ç–æ–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n–≠—Ç–∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞", reply_markup=kb.markup_request)


@dp.message_handler(commands=['hi7'])
async def process_hi7_command(message: types.Message):
    await message.reply("–°–µ–¥—å–º–æ–µ - –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤–º–µ—Å—Ç–µ", reply_markup=kb.markup_big)


@dp.message_handler(commands=['rm'])
async def process_rm_command(message: types.Message):
    await message.reply("–£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=kb.ReplyKeyboardRemove())
 
@dp.message_handler(commands=['1'])
async def process_command_1(message: types.Message):
    await message.reply("–ü–µ—Ä–≤–∞—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞", reply_markup=kb.inline_kb1)

@dp.message_handler(lambda message: message.text == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')


@dp.message_handler(lambda message: message.text=='btn')
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code) 
    if code == 2:
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 5:
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')

@dp.message_handler(commands=['2'])
async def process_command_2(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", reply_markup=kb.inline_kb_full)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)